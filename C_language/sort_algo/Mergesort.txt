Merge Sort

*It is an algorithm which is based on divide and conquer approach.
*Divideds the list into two sublists of sizes as nearly equal as possible.
*Sorts the two sublists separately by using merge sort.
*Merges the sorted sublists into a single list


Algorithm

To sort A[p .. r]:

1. Divide Step

If a given array A has zero or one element, simply return; it is already sorted. Otherwise, split A[p .. r] into two subarrays A[p .. q] and A[q + 1 .. r], each containing about half of the elements of A[p .. r]. That is, q is the halfway point of A[p .. r].

2. Conquer Step

Conquer by recursively sorting the two subarrays A[p .. q] and A[q + 1 .. r].

3. Combine Step

Combine the elements back in A[p .. r] by merging the two sorted subarrays A[p .. q] and A[q + 1 .. r] into a sorted sequence. To accomplish this step, we will define a procedure MERGE (A, p, q, r).


C-code


void merge_divide(int arr[],int low,int high){

    int mid;
	if(low<high){
         mid=(low+high)/2;
         merge_divide(arr,low,mid);
         merge_divide(arr,mid+1,high);
         mergesort(arr,low,mid,high);
    }
}

void mergesort(int arr[],int low,int mid,int high){

    int i,m,k,l,temp[MAX];

    l=low;
    i=low;
    m=mid+1;

    while((l<=mid)&&(m<=high)){

         if(arr[l]<=arr[m]){
             temp[i]=arr[l];
             l++;
         }
         else{
             temp[i]=arr[m];
             m++;
        }
         i++;
    }

    if(l>mid){
         for(k=m;k<=high;k++){
             temp[i]=arr[k];
             i++;
         }
    }
    else{
         for(k=l;k<=mid;k++){
             temp[i]=arr[k];
             i++;
         }
    }
   
    for(k=low;k<=high;k++){
         arr[k]=temp[k];
    }
}




Time Complexity


Consider l is the list

Splitting into  two halves l1 and l2


It will be like


merge(mergesort(l1,n/2), mergesort(l2,n/2))

f(n)=2f(n/2)[time taken for 2 recursive calls]+n[Time taken for merging]

f(n)=2^kf(n/2^k)+kn

n=2^k


taking log on both sides
k=logn


Substituting the value of k

so, Time complexity=O(nlogn)
