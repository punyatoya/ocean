

Linear search
---------------


Linear search can be called as sequential or brute-force search in which
it sequentially moves through the collection(list of elements) looking for the matching value.

Algorithm


	For each element in the list
		if the element matches the key
			stop the search and return the element's location
	return -1





	C program


	int linear(int arr[], int n, int key)
	{
		int i;
		for (i=0;i<n;i++)
		{
			if(key==arr[i])
				return i;
		}
		return (-1);
	}

	The Worst case scenario will be if the key is the last one or it is'nt found.
	If there are n elements in the list, we need to have n interations.
	So the Worst Time Complexity= O(n).


	The Best Case scenario will be if the key is the first one, then the number of iterations will be 1.
	So the Best Time Complexity= O(1).

	The Average time complexity=O(n)


			--------*-----------*-------



Binary Search
-------------

 Instead of searching the list in sequence, a binary search will start by examining the middle item.


 For binary search, the array should be arranged in ascending or descending order. In each step, the algorithm compares the search key value with the key value of the middle element of the array. If the keys match, then a matching element has been found and its index, or position, is returned. Otherwise, if the search key is less than the middle element's key, then the algorithm repeats its action on the sub-array to the left of the middle element or, if the search key is greater, on the sub-array to the right. 



 Algorithm

 lower=lower bound of the list
 upper=upper bound of the list
 mid=middle index of the list

 mid=(lower+upper)/2

 loop condition will be lower <= upper

 	if key is equals to mid
 		then return mid

 	if key is less than array[mid]
 		then search the key between lower and (mid-1)

 	if key is greater then mid
 		then search the key between mid+1 and upper

 return (-1);




 C-code


int binary_search(int A[], int key, int lower, int upper)
{
	int mid;
	while (lower <=upper)
	{
		mid=(lower+upper)/2;

		if (key == A[mid])
			return mid;
		if (key < A[mid])
			upper=mid-1;
		if (key > A[mid])
			lower=mid+1;

	}
	return (-1);
    
}

Time Complexity

each comparison eliminates about half of the remaining items from consideration.

If we start with n items, about n/2 items will be left after the first comparison. After the second comparison, there will be about n/4. Then n/8, n/16.

The number of comparisons necessary to get to this point is i where n/2^i=1. Solving for i gives us i=logn. The maximum number of comparisons is logarithmic with respect to the number of items in the list. Therefore, the binary search is O(logn).






