
	1. Declaration:
		[data-type] *[variable]

		int *p;


	2.	Pointers are used in C program to access the memory and manipulate 		the address.

	3.	Pointer variable or simply pointer are the special types of variables that holds memory address rather than data, that is, a variable that holds address value is called a pointer variable or simply a pointer.

	4.	e.g

		int main()
		{
			int *p,a;
			a=2;
			p=&a; p is used to hold the memory address

			printf("The value of p=%d",p); /*Address of a is printed*/
			printf("The value of a=%d",*p); /*the *p will give the value of a*/

		}


	5. Relation between Arrays and Pointers

		int arr[10];

		"arr"= name gives the address of array

		value inside the address &arr[0] and address arr are equal. Value in address &arr[0] is arr[0] and value in address arr is *arr. Hence, arr[0] is equivalent to *arr.

		Similarly,

		&a[1] is equivalent to (a+1)  AND, a[1] is equivalent to *(a+1).

	6.
		To understand pointer arithmetic, let us consider that ptr is an integer pointer which points to the address 1000. Assuming 32-bit integers, let us perform the following arithmetic operation on the pointer:

		ptr++
		Now, after the above operation, the ptr will point to the location 1004 because each time ptr is incremented, it will point to the next integer location which is 4 bytes next to the current location. This operation will move the pointer to next memory location without impacting actual value at the memory location. If ptr points to a character whose address is 1000, then above operation will point to the location 1001 because next character will be available at 1001.

	7. Incrementing and decrementing pointer

			e.g
				int a[10];
				int *p;
				p=&a;

				p++; /*move to the next location*/
				and *p /*will give the value*/

				similarly applies for decrementing


	8.	Pointer Comparisons
			Pointers may be compared by using relational operators, such as ==, <, and >. If p1 and p2 point to variables that are related to each other, such as elements of the same array, then p1 and p2 can be meaningfully compared.


	9.	Array of pointers

		There may be a situation when we want to maintain an array, which can store pointers to an int or char or any other data type available. Following is the declaration of an array of pointers to an integer:

		int *ptr[MAX];
		This declares ptr as an array of MAX integer pointers. Thus, each element in ptr, now holds a pointer to an int value. 

	10. Pointer to pointer

		int **p;
		int *a;
		int b=3;
		a=&b;
		p=&a;

	11.	 Returning pointer from function and passing pointers to the function.

	
