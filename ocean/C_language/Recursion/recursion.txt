


Recursion


	A function that calls itself is known as recursive function and this technique is known as recursion in C programming.



	e.g


	An example of C program to find sum of first n natural numbers using recursion.

	#include <stdio.h>
	int sum(int n);
	int main(){
    	int num,add;
    	printf("Enter a positive integer:\n");
    	scanf("%d",&num);
    	add=sum(num);
    	printf("sum=%d",add);
	}
	int sum(int n){
    	if(n==0)
       		return n;
    	else
       		return n+sum(n-1);    /*self call  to function sum() */
	}


	sum(5)
	=5+sum(4)
	=5+4+sum(3)
	=5+4+3+sum(2)
	=5+4+3+2+sum(1)
	=5+4+3+2+1+sum(0)
	=5+4+3+2+1+0
	=5+4+3+2+1
	=5+4+3+3
	=5+4+6
	=5+10
	=15

Recursion is a costly operation because it involves stack overhead.


	One another example is Fibonacci series

	Mathematical Function:

	F(0)=0;
	F(1)=1;
	F(n)=F(n-1)+F(n-2) for n>=2

int Fibonacci(int n)
{
   if ( n == 0 )
      return 0;
   else if ( n == 1 )
      return 1;
   else
      return ( Fibonacci(n-1) + Fibonacci(n-2) );
} 



Time complexity

T is the time taken

T(n)= T(n-1)+T(n-2)+C

Consider the 
	T(n-1)=T(n-2)
	then


	T(n)=2T(n-2)+C
		=2(2T(n-4)+C)+C
		=4T(n-4)+3C
		=8T(n-6)+7C
		=2^k(n-2*k)+(2*k-1)C


		n-2*k=0
		k=n/2


		T(n)=2^n/2 T(0)+(2^n/2-1)C
		(1+C)*2^n/2 -C


		T(n)=2^n/2  (lower bound)





	Now Consider the 
		T(n-2)=T(n-1)
		so T(n)=2T(n-1)+C
			=4T(n-2)+3C
			=2^kT(n-k)+(2^k-1)C

			n-k=0
			n=k


			So
			=2^nT(0)+(2^n-1)C
			=(1+C)2^n-C


		T(n)=2^n
		(upper bound)



		For time complexity
		We always take upper bound

		O(2^n) is the time complexity (Exponential time complexity)














