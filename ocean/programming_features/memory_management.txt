MEMORY MANAGEMENT




Memory management is the process of controlling and coordinating computer memory, assigning portions called blocks to various running programs to optimize overall system performance. Memory management resides in hardware, in the OS (operating system), and in programs and applications.

In hardware, memory management involves components that physically store data, such as RAM (random access memory) chips, memory caches, and flash-based SSDs (solid-state drives). In the OS, memory management involves the allocation (and constant reallocation) of specific memory blocks to individual programs as user demands change. At the application level, memory management ensures the availability of adequate memory for the objects and data structures of each running program at all times. Application memory management combines two related tasks, known as allocation and recycling.

When the program requests a block of memory, a part of the memory manager called the allocator assigns that block to the program.
When a program no longer needs the data in previously allocated memory blocks, those blocks become available for reassignment. This task can be done manually (by the programmer) or automatically (by the memory manager).




Link:http://www.memorymanagement.org/mmref/begin.html


1.1. Hardware memory management

Memory management at the hardware level is concerned with the electronic devices that actually store data. This includes things like RAM and memory caches.



1.2. Operating system memory management

In the operating system, memory must be allocated to user programs, and reused by other programs when it is no longer required. The operating system can pretend that the computer has more memory than it actually does, and also that each program has the machine’s memory to itself; both of these are features of virtual memory systems.


1.3. Application memory management

Application memory management involves supplying the memory needed for a program’s objects and data structures from the limited resources available, and recycling that memory for reuse when it is no longer required. Because application programs cannot in general predict in advance how much memory they are going to require, they need additional code to handle their changing memory requirements.
Application memory management combines two related tasks:
Allocation
When the program requests a block of memory, the memory manager must allocate that block out of the larger blocks it has received from the operating system. The part of the memory manager that does this is known as the allocator. There are many ways to perform allocation, a few of which are discussed in Allocation techniques.

Recycling

When memory blocks have been allocated, but the data they contain is no longer required by the program, then the blocks can be recycled for reuse. There are two approaches to recycling memory: either the programmer must decide when memory can be reused (known as manual memory management); or the memory manager must be able to work it out (known as automatic memory management). These are both described in more detail below.


An application memory manager must usually work to several constraints, such as:

CPU overhead

8The additional time taken by the memory manager while the program is running.

*Pause times

*The time it takes for the memory manager to complete an operation and return control to the program.
*This affects the program’s ability to respond promptly to interactive events, and also to any asynchronous event such as a network connection.
*Memory overhead
*How much space is wasted for administration, rounding (known as internal fragmentation), and poor layout (known as external fragmentation).
*Some of the common problems encountered in application memory management are considered in the next section.